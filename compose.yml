services:
  db:
    # We use a mariadb image which supports both amd64 & arm64 architecture
    image: mariadb:10-focal
    # If you really want to use MySQL, uncomment the following line
    #image: mysql:8
    command: '--default-authentication-plugin=mysql_native_password'
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 --password="$$(cat /run/secrets/db-password)" --silent']
      interval: 3s
      retries: 5
      start_period: 30s
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backnet
    environment:
      - MYSQL_DATABASE=example
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 3306
      - 33060

  traefik:
    image: "traefik:v2.6"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - backnet
      - frontnet
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  inventory_backend:
    build:
      context: inventary_backend
      target: builder
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inventory.rule=(Host(`localhost`) && PathPrefix(`/inventory`))"
      - "traefik.http.routers.inventory.entrypoints=web"
    secrets:
      - db-password
    ports:
      - 8001:8001
    networks:
      - backnet
      - frontnet
    depends_on:
      db:
        condition: service_healthy

  products_backend:
    build:
      context: products_backend
      target: builder
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.products.rule=(Host(`localhost`) && PathPrefix(`/products`))"
      - "traefik.http.routers.products.entrypoints=web"
    restart: always
    secrets:
      - db-password
    ports:
      - 8000:8000
    networks:
      - backnet
      - frontnet
    depends_on:
      db:
        condition: service_healthy

volumes:
  db-data:

secrets:
  db-password:
    file: db/password.txt

networks:
  backnet:
  frontnet: