services:

## Database
  db:
    # We use a mariadb image which supports both amd64 & arm64 architecture
    image: mariadb:10-focal
    #image: mysql:8
    command: '--default-authentication-plugin=mysql_native_password'
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 --password="$$(cat /run/secrets/db-password)" --silent']
      interval: 3s
      retries: 5
      start_period: 30s
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backnet
    environment:
      - MYSQL_DATABASE=example
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 3306
      - 33060

## Api Gateway
  traefik:
    image: "traefik:v2.6"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"

    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - backnet
      - frontnet
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - backnet
      - frontnet
    labels:
       - "traefik.enable=true"
       - "traefik.http.routers.prometheus.rule=(Host(`prometheus.localhost`)) || (Host(`localhost`) && PathPrefix(`/prometheus`))"       
       - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
       - "traefik.http.routers.prometheus.entrypoints=web"

## Metrics Service
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - backnet
      - frontnet
    user: "104"
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=(Host(`grafana.localhost`)) || (Host(`localhost`) && PathPrefix(`/grafana`))"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.http.routers.grafana.entrypoints=web"

## Backend Service
  orders_backend:
    build:
      context: orders_backend
      target: builder
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.order.rule=(Host(`localhost`) && PathPrefix(`/orders`))"
      - "traefik.http.routers.order.entrypoints=web"
    secrets:
      - db-password
    ports:
      - 8002:8002
    networks:
      - backnet
      - frontnet
      - rabbitmq_go_net
    depends_on:
      - rabbitmq

## Backend Service
  inventory_backend:
    build:
      context: inventory_backend
      target: builder
    restart: always
    secrets:
      - db-password
    ports:
      - 8001:8001
    networks:
      - backnet
      - frontnet
      - rabbitmq_go_net
    depends_on:
      - rabbitmq
      - db

## Backend Service
  products_backend:
    build:
      context: products_backend
      target: builder
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.products.rule=(Host(`localhost`) && PathPrefix(`/products`))"
      - "traefik.http.routers.products.entrypoints=web"
    restart: always
    secrets:
      - db-password
    ports:
      - 8000:8000
    networks:
      - backnet
      - frontnet
      - rabbitmq_go_net
    depends_on:
      db:
        condition: service_healthy

## Pub Sub Service
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - rabbitmq_go_net

## Auth Backend
  auth_backend:
    build:
      context: auth_backend
      target: builder
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=(Host(`localhost`) && PathPrefix(`/auth`))"
      - "traefik.http.routers.auth.entrypoints=web"
    restart: always
    secrets:
      - db-password
    ports:
      - 8005:8005
    env_file:
      - ./auth_backend/.env.dev
    networks:
      - backnet
      - frontnet
      - rabbitmq_go_net
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  prometheus_data: {}    
  grafana_data: {}
  db-data:

secrets:
  db-password:
    file: db/password.txt

networks:
  backnet:
  frontnet:
  traefiknet:
  inbound:
  rabbitmq_go_net:
    driver: bridge